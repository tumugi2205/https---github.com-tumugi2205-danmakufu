#東方弾幕風
#Title[弾からレーザー]
#Text[]
#ScriptVersion[2]

script_enemy_main {
    let name        = "Unknown";
    let imgBoss     = "script\img\ExRumia.png";

    // 敵の初期位置
    let xIni        = GetClipMaxX - 180;
    let yIni        = GetClipMaxY - 360;

	let imgExRumia=GetCurrentScriptDirectory~"img\ExRumia.png";
	let count =0;
	let count2 =0;
	let count3 =0;
	let arrayObj = [];

//////////////////////////////////////////////////////////////////////
    @Initialize {
        CutIn(YOUMU, name, "", 0, 0, 0, 0);

        SetLife(100);
        SetTimer(66);
        SetScore(4000000);
        SetDamageRate(5, 5);

        LoadGraphic(imgBoss);
        SetTexture(imgBoss);
        setGraphicStop;

        TMain;
    }




    @MainLoop {
        SetCollisionA(GetX, GetY, 32);
        SetCollisionB(GetX, GetY, 16);

        yield;
    }

    @DrawLoop {
        DrawGraphic(GetX, GetY);
    }

    @Finalize {
        DeleteGraphic(imgBoss);
    }

////////////////////////////メインタスク//////////////////////////////


    task TMain {
        yield;
        standBy;



	loop{
		if(count>0 && count%200==0){
		nWayShot;//分裂弾呼び出し
		}

	count++;
	yield;
	}

    }
//////////////////////////////分裂前動作//////////////////////////////
task nWayShot{

	let way=1; //way数
	let wideAngle=-90;//発射角
	
	let angle;
	angle = 90;
	let wayAngle = 0;
	wayAngle = wideAngle / ( way - 1 );
	angle -= wideAngle / 2;

		loop(way) {
	        ascent(let i in 0..6){
	            CreateHomingShot(GetX(), GetY(), 2, GetAngleToPlayer() + i*60 + 30, 2, 180, WHITE21, 20);
	    }
		angle += wayAngle;
		}
		count=0;
}
///////////////////////////////分裂動作///////////////////////////////
task division{

	ascent(let i in 0..length(arrayObj)){

	let way=1; //way数
	let wideAngle=240;//発射角

	let angle;
	angle = 90;
	let wayAngle = 0;
	wayAngle = wideAngle / ( way - 1 );
	angle -= wideAngle / 2;
	let angle2;
        angle2 = atan2(GetPlayerY -  Obj_GetY(arrayObj[i]),GetPlayerX - Obj_GetX(arrayObj[i]));

		loop(way) {
			CreateObjLaser(Obj_GetX(arrayObj[i]), Obj_GetY(arrayObj[i]), 8, angle2, 50, 5, RED01, 0);
			Obj_Delete(arrayObj[i]);
		angle += wayAngle;
		}
	}
	count2=0;
}
///////////////////////分裂前弾オブジェクト設定/////////////////////////
    task CreateHomingShot(let x, let y, let speed,
                 let angle, let mo, let limit, let graphic, let delay) {
        
        //オブジェクト弾の作成
        let obj = Obj_Create(OBJ_SHOT);
        
        //パラメータの設定
        Obj_SetPosition(obj, x, y);
        Obj_SetSpeed(obj, speed);
        Obj_SetAngle(obj, angle);
        ObjShot_SetGraphic(obj, graphic);
        ObjShot_SetDelay(obj, delay);
        Obj_SetCollisionToPlayer(obj,false);
        
        loop(delay){ yield; }
        
   arrayObj = arrayObj ~ [obj];
        loop(limit) {
            if(Obj_BeDeleted(obj)){
                break;
            }
        
            let angleToPlayer = atan2(GetPlayerY-Obj_GetY(obj), GetPlayerX-Obj_GetX(obj));
            
            if(sin(angleToPlayer - Obj_GetAngle(obj))>0){
                Obj_SetAngle(obj, Obj_GetAngle(obj) + mo);
            }
            else{
                Obj_SetAngle(obj, Obj_GetAngle(obj) - mo);
            }
            yield;
        }
    
	loop(delay){ yield; }


		while(!Obj_BeDeleted(obj)) {
			if(count2==5){
			division;//分裂
			}
		count2++;
		yield;

		}
}
/////////////////////分裂後Lazerオブジェクト設定/////////////////////

task CreateObjLaser(let x, let y, let speed, angle, length, width, graphic, delay){
//分裂後Lazerオブジェクト設定
	
	let obj2 = Obj_Create(OBJ_SINUATE_LASER);
	Obj_SetPosition(obj2, x, y);
	Obj_SetSpeed(obj2, speed);
	Obj_SetAngle(obj2, angle);
	ObjSinuateLaser_SetLength(obj2, length);
	ObjSinuateLaser_SetWidth(obj2, width);
	ObjShot_SetGraphic(obj2, graphic);
	ObjShot_SetDelay(obj2, delay);

		while(!Obj_BeDeleted(obj2)) {
		//動作を記入
		yield;
		}
}/*
///////////////////////////へにょりの場合/////////////////////////////
task CreateSinuateLaser(x,y,Angle,Length,Width,Color,radius,frame){

	let obj3 = Obj_Create(OBJ_SINUATE_LASER);
	//Color	  弾の色
	//radius  広がるサイズ
	//frame	  目的地までの到達時間
	let obj3 = Obj_Create(OBJ_SINUATE_LASER);
	let t = 0.5;
	let x1 = x + cos(Angle)*radius;
	let y1 = y + sin(Angle)*radius;
	let x2 = GetPlayerX;//目的地X座標
	let y2 = GetPlayerY;//目的地Y座標
	let X;
	let Y;
	Obj_SetPosition(obj3, x, y);
	Obj_SetSpeed(obj3, 0);
	Obj_SetAngle(obj3, Angle);
	ObjShot_SetGraphic(obj3, Color);
	ObjShot_SetDelay(obj3, 0);
	ObjSinuateLaser_SetLength(obj3, Length);
	ObjSinuateLaser_SetWidth(obj3, Width);    
	loop(frame)
	{
		X = (t^2*x2+2*t*(1-t)*x1+(1-t)^2*x);
		Y = (t^2*y2+2*t*(1-t)*y1+(1-t)^2*y);
		Obj_SetPosition(obj3, X, Y);
		t+=1/frame;
		yield;
	}
	loop(25){yield;}
	Obj_Delete(obj3);
}*/
///////////////////////////その他(移動含む)///////////////////////////
    // 初期位置へ移動
    sub standBy {
        let wIni = 120;

        SetMovePosition02(xIni, yIni, wIni);
        setGraphicMove;

        SetInvincibility(wIni);
        wait(wIni);
    }

	// グラフィックの設定
	sub setGraphicStop  { SetGraphicRect(  0,   0,  64,  64); }
	sub setGraphicPose  { SetGraphicRect( 64,   0, 128,  64); }
	sub setGraphicLeft  { SetGraphicRect(128,   0, 192,  64); }
	sub setGraphicRight { SetGraphicRect(192,   0, 256,  64); }

	sub setGraphicMove {
		if(GetSpeedX < 0) {
		setGraphicLeft;
		} 

		else {
		setGraphicRight;
		}
	}

    // w フレームだけ待つ
    function wait(w) {
        loop(w) { yield; }
    }

    task TMain2 {
        yield;
        standBy;



	loop{
		if(count>0 && count%240==0){
		nWayShot;//分裂弾呼び出し
		}

	count++;
	yield;
	}

    }
}