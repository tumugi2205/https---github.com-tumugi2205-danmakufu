#東方弾幕風
#Title[ロッソ・ファンタズマ]
#Text[杏子が練習中です
邪魔したら....ねぇ？]
#BackGround[User()]
#ScriptVersion[2]
#BGM[bgm\bgm.wav\イマジンブレイク.mp3]

script_enemy_main{

	let count =0;
	let count2 =0;
	let count3 =0;
       let frame     = 0;
       let angleBase = 90;
    //グローバル変数
	let imgBoss = "script\img\きょーこ.png";
	let arrayObj = [];
 let wIni = 120;
	
	///////////////////////////////////////////////////////////

	@Initialize{
        LoadUserShotData("script\杏子\新しいフォルダ\DAtA.txt");
        SetX(GetCenterX);
        SetY(GetClipMinY + 120);
	LoadGraphic(imgBoss);
        SetLife(2000);
        SetTimer(60);
        SetDamageRate(50, 50);
        SetTexture(imgBoss);
        SetGraphicRect(0, 0, 63, 63);
        SetScore(3500);
        SetDamageRate(60,70);
        CutIn(YOUMU,"ロッソ・ファンタズマ","script\img\画像 860.png",-250,0,350,600);//スペルカード名表示
	    TMain;  /*
	    TNway1;  
	    TNway2;
	    TNway3;
	    TNway4;
	    TNway5;
	    TNway6;
	    TNway7;
	    TNway8;*/
            TMove;
	}

		
	@MainLoop{
		SetCollisionA(GetX(), GetY(), 32);
		SetCollisionB(GetX(), GetY(), 24);

         yield;
	}

	@DrawLoop{
	    DrawGraphic(GetX(), GetY());
	}
		
	@Finalize{
	    DeleteGraphic(imgBoss);
	}


////////////////////////////メインタスク//////////////////////////////

    task TMain {
        yield;


	loop{
		if(count>0 && count%120==0){
		nWayShot;//分裂弾呼び出し
		}

	count++;
	yield;
	}

    }


//////////////////////////////分裂前動作//////////////////////////////
task nWayShot{

	let way=1; //way数
	let wideAngle=160;//発射角
	
        LoadUserShotData("script\杏子\新しいフォルダ\DAtA.txt");
	let angle;
	angle = 90;
	let wayAngle = 0;
	wayAngle = wideAngle / ( way - 1 );
	angle -= wideAngle / 2;

		loop(rand(1,4)) {

		//オブジェクト作成
		CreateObjShot(GetX+rand(150,-150), GetY+rand(0,+175), 0, 90, 1, 50);

		angle += wayAngle;
		}
		count=0;
}
///////////////////////////////分裂動作///////////////////////////////
task division{

	ascent(let i in 0..length(arrayObj)){
	let way=1; //way数
	let wideAngle=30;//発射角

	let angle;
	angle = GetAngleToPlayer;
	let wayAngle = 0;
	wayAngle = wideAngle / ( way - 1 );
	angle -= wideAngle / 2;
	let angle2;
        angle2 = atan2(GetPlayerY -  Obj_GetY(arrayObj[i]),GetPlayerX - Obj_GetX(arrayObj[i]));

		loop(1) {

	    loop(20){
	        CreateShot12(Obj_GetX(arrayObj[i]), Obj_GetY(arrayObj[i]),rand(-2,2),rand(-1,-3),0,0.02,2,3,RED04,3);
	    }			CreateObjLaser(Obj_GetX(arrayObj[i]), Obj_GetY(arrayObj[i]), 10, angle2, 100, 10, RED04, 0);
			CreateSinuateLaser(Obj_GetX(arrayObj[i]), Obj_GetY(arrayObj[i]), angle, 15, 10,RED01, 100, 120);
			Obj_Delete(arrayObj[i]);
		angle += wayAngle;
		}
	}
	count2=0;
}
///////////////////////分裂前弾オブジェクト設定/////////////////////////
task CreateObjShot(let x, let y, let speed, let angle, let graphic, let delay) {
    
	let obj = Obj_Create(OBJ_SHOT);
	Obj_SetPosition(obj, x, y);
	Obj_SetSpeed(obj, speed);
	Obj_SetAngle(obj, angle);
	ObjShot_SetGraphic(obj, graphic);
	ObjShot_SetDelay(obj, delay);
    
	loop(delay){ yield; }
   arrayObj = arrayObj ~ [obj];


		while(!Obj_BeDeleted(obj)) {
			if(count2==360){
			division;//分裂
			}
		count2++;
		yield;

		}
}
/////////////////////分裂後Lazerオブジェクト設定//////////////////////
task CreateObjLaser(let x, let y, let speed, angle, length, width, graphic, delay){
//分裂後Lazerオブジェクト設定
	
	let obj2 = Obj_Create(OBJ_SINUATE_LASER);
	Obj_SetPosition(obj2, x, y);
	Obj_SetSpeed(obj2, speed);
	Obj_SetAngle(obj2, angle);
	ObjSinuateLaser_SetLength(obj2, length);
	ObjSinuateLaser_SetWidth(obj2, width);
	ObjShot_SetGraphic(obj2, graphic);
	ObjShot_SetDelay(obj2, delay);

		while(!Obj_BeDeleted(obj2)) {
		//動作を記入
		yield;
		}
}
///////////////////////////へにょりの場合/////////////////////////////
task CreateSinuateLaser(x,y,Angle,Length,Width,Color,radius,frame){


	//Color	  弾の色
	//radius  広がるサイズ
	//frame	  目的地までの到達時間
	let obj3 = Obj_Create(OBJ_SINUATE_LASER);
	let t = 0;
	let x1 = x + cos(Angle)*radius;
	let y1 = y + sin(Angle)*radius;
	let x2 = GetPlayerX;//目的地X座標
	let y2 = GetPlayerY;//目的地Y座標
	let X;
	let Y;
	Obj_SetPosition(obj3, x, y);
	Obj_SetSpeed(obj3, 0);
	Obj_SetAngle(obj3, Angle);
	ObjShot_SetGraphic(obj3, Color);
	ObjShot_SetDelay(obj3, 0);
	ObjSinuateLaser_SetLength(obj3, Length);
	ObjSinuateLaser_SetWidth(obj3, Width);    
	loop(frame)
	{
		X = (t^2*x2+2*t*(1-t)*x1+(1-t)^2*x);
		Y = (t^2*y2+2*t*(1-t)*y1+(1-t)^2*y);
		Obj_SetPosition(obj3, X, Y);
		t+=1/frame;
		yield;
	}
	loop(25){yield;}
	Obj_Delete(obj3);
}
///////////////////////////その他(移動含む)///////////////////////////
    // 初期位置へ移動
// キャラを移動させるタスク
    task TMove {
        yield;

        loop {
            loop(120) { yield; }
            moveToPlayer(rand(40, 80), rand(-40, 40), 60,
                         GetClipMinX + 32, GetClipMinY + 32,
                         GetClipMaxX - 32, GetClipMinY + 160);
        }
    }

    // なるべくプレイヤーの方向に移動
    //   xMove  : x 方向の移動量（正の数）
    //   yAdd   : y 方向の移動量
    //   frame  : 移動に要するフレーム数
    //   left   : 以下、可動範囲
    //   top    :
    //   right  :
    //   bottom :
    function moveToPlayer(xMove, yAdd, frame, left, top, right, bottom) {
        let x;
        let y;

        if(GetPlayerX < GetX) {
            // プレイヤーより右に敵がいれば、敵は左に動きます。
            x = GetX - xMove;

            // 但し、敵が可動領域の左端よりも左にいくようなら、右に動きます。
            if(x < left) {
                x = GetX + xMove;
            }
        } else {
            // さもなくば、敵は右に動きます。
            x = GetX + xMove;

            // 但し、敵が可動領域の右端よりも右にいくようなら、左に動きます。
            if(right < x) {
                x = GetX - xMove;
            }
        }

        // 可動領域の外に行く場合は、端っこで止めます。
        y = GetY + yAdd;
        if(y < top) {
            y = top;
        } else if(bottom < y) {
            y = bottom;
        }

        SetMovePosition02(x, y, frame);
    }

}