#東方弾幕風
#Title[進化「終焉への階段」]
#Text[妖々夢５面：妖夢スペルのクローン]
#ScriptVersion[2]

script_enemy_main {
    //グローバル変数
       let imgBoss   = "script\img\杏子.png";
	let wIni = 120;
	let arrayObj = [];


    // 初期位置
    let xIni        = GetClipMaxX - 32;
    let yIni        = GetClipMaxY - 32;

    // 横薙ぎ後の位置
    let xSlash      = GetClipMinX + 32;
    let ySlash      = yIni;

    // 開始位置
    let xStart      = GetClipMinX + 48;
    let yStart      = GetClipMinY + 96;

    // レーザーの設置位置
    let xLaserBegin = GetClipMaxX + 32;
    let xLaserEnd   = GetClipMinX - 32;
    let yLaser      = GetClipMaxY - 16;

    @Initialize {
       CutIn(YOUMU,"進化「終焉への階段」",0,0,0,0,0);//スペルカード名表示
        SetLife(2000);
        SetTimer(66);
        SetScore(4000000);
        SetDamageRate(65, 5);/*
        SetInvincibility(wIni);*/
       SetMovePosition02(GetCenterX(), GetClipMinY() + 120, wIni);
        
        LoadGraphic(imgBoss);
        SetTexture(imgBoss);
        setGraphicStop;

	    TNway();

        TMain;/*
        TNway2;*/
    }

    @MainLoop {
        SetCollisionA(GetX, GetY, 32);
        SetCollisionB(GetX, GetY, 16);

        yield;
    }

    @DrawLoop {
	    SetTexture(imgBoss);
	    SetGraphicRect(1, 1, 64, 64);
        DrawGraphic(GetX, GetY);
    }

    @Finalize {
        DeleteGraphic(imgBoss);
    }

    // メインタスク
    task TMain {
        yield;

        standBy;
        levitate;
        concentration;
        slash;
        ready;

        loop {
            move;
            shot;
        }
    }

    // 初期位置へ移動
    sub standBy {
        let wIni = 120;

        SetMovePosition02(xIni, yIni, wIni);
        setGraphicMove;

        SetInvincibility(wIni);
        wait(wIni);
    }

    // 浮揚
    sub levitate {
        let wLev = 60;

        setGraphicStop;
        SetMovePosition02(xIni, yIni + 10, wLev);
        wait(wLev);
        SetMovePosition02(xIni, yIni, wLev);
        wait(wLev);
    }

    // 力を集中
    sub concentration {
        let wConc = 60;

        setGraphicPose;
        Concentration01(wConc);
        wait(wConc);
    }

    // 横薙ぎ
    sub slash {
        let id    = 0;
        let wMove = 10;
        let wStop = 60 - wMove;
        let span  = (xLaserBegin - xLaserEnd) / wMove;    // レーザーを延ばす間隔

        CreateLaserA(id, xLaserBegin, yLaser, 0, 10, BLUE01, 0);
        SetLaserDataA(id, 0, 180, 0, span, 0, 0);
        SetLaserDataA(id, wMove, NULL, 0, 0, 0, 0);
        FireShot(id);

        SetMovePosition02(xSlash, ySlash, wMove);
        setGraphicMove;
        wait(wMove);
        wait(wStop);
    }

    // 移動
    sub move {
        let wMove = 60;

        moveToPlayer(rand(40, 80), rand(-40, 40), wMove,
                     GetClipMinX + 48, GetClipMinY +  32,
                     GetClipMaxX - 48, GetClipMinY + 128);
        setGraphicMove;
        wait(wMove);
    }

    // 定位置へ移動して、攻撃開始
    sub ready {
        let wMove = 120;
        let wStop = 60;

        SetMovePosition02(xStart, yStart, wMove);
        setGraphicMove;
        wait(wMove);

        setGraphicStop;
        wait(wStop);

        SetDamageRate(40, 40);
    }

    // way 弾を発射
    sub shot {
        let wStop = 60;

        setGraphicPose;
        wait(wStop);
    }

    // なるべくプレイヤーの方向に移動
    //   xMove  : x 方向の移動量（正の数）
    //   yAdd   : y 方向の移動量
    //   frame  : 移動に要するフレーム数
    //   left   : 以下、可動範囲
    //   top    :
    //   right  :
    //   bottom :
    function moveToPlayer(xMove, yAdd, frame, left, top, right, bottom) {
        let x;
        let y;

        if(GetPlayerX < GetX) {
            // プレイヤーより右に敵がいれば、敵は左に動きます。
            x = GetX - xMove;

            // 但し、敵が可動領域の左端よりも左にいくようなら、右に動きます。
            if(x < left) {
                x = GetX + xMove;
            }
        } else {
            // さもなくば、敵は右に動きます。
            x = GetX + xMove;

            // 但し、敵が可動領域の右端よりも右にいくようなら、左に動きます。
            if(right < x) {
                x = GetX - xMove;
            }
        }

        // 可動領域の外に行く場合は、端っこで止めます。
        y = GetY + yAdd;
        if(y < top) {
            y = top;
        } else if(bottom < y) {
            y = bottom;
        }

        SetMovePosition02(x, y, frame);
    }

    // グラフィックの設定
    sub setGraphicStop  { SetGraphicRect(  0,   0,  64,  64); }
    sub setGraphicPose  { SetGraphicRect( 64,   0, 128,  64); }
    sub setGraphicLeft  { SetGraphicRect(128,   0, 192,  64); }
    sub setGraphicRight { SetGraphicRect(192,   0, 256,  64); }

    sub setGraphicMove {
        if(GetSpeedX < 0) {
            setGraphicLeft;
        } else {
            setGraphicRight;
        }
    }

    // w フレームだけ待つ
    function wait(w) {
        loop(w) { yield; }
    }

	/*task TNway2{
	    //初期化
	    
	    yield;
	    loop(wIni){ yield; }
	    
	    //処理
     loop{
     loop(1){
             CreateObjLaser(GetClipMinX, GetClipMaxY-375, 0,40000,20, RED02, 1,600) ;
	        loop(1){ yield; }
	    }
         loop(600){ yield; }
	}
 }*/
	task TNway{
	    //初期化
	    
	    yield;
	    loop(wIni){ yield; }
	    
	    //処理
	    loop{
	        CreateImpactingShot(rand(GetClipMinX(), GetClipMaxX()),
	                rand(GetClipMinY(), GetClipMinY() + 50), rand(1,2),
	                rand(45, 135), WHITE03, WHITE05, 20);
	    }
	        loop(20){ yield; }
	}
	
	//////////////////////////////////////////////////////////
/* //オブジェクト弾の例

        let obj_L = Obj_Create(OBJ_LASER);

task CreateObjLaser(let x, let y, let angle,let length,
                 let width, let graphic, let delay,let time) {
 
   
        //オブジェクト弾の作成
        
        //パラメータの設定
        Obj_SetPosition(obj_L, x, y);
        Obj_SetSpeed(obj_L, 0);
        Obj_SetAngle(obj_L, angle);
        ObjShot_SetGraphic(obj_L, graphic);
        ObjShot_SetDelay(obj_L, delay);
        ObjLaser_SetLength(obj_L, length);
        ObjLaser_SetWidth(obj_L, width);
        ObjLaser_SetSource(obj_L, true);
        
        loop(delay + time){ yield; }
        
        Obj_Delete(obj_L);
}*/
    //弾同士の当たり判定の例
    
    //当たり判定をとるためオブジェクトIDはグローバル変数にする
    arrayObj = [];
    
    //衝突するとはじける弾
    task CreateImpactingShot(let x, let y, let speed,
                 let angle, let graphic1, let graphic2, let delay) {
        



        //オブジェクト弾の作成
        let obj = Obj_Create(OBJ_SHOT);
        
        //パラメータの設定
        Obj_SetPosition(obj, x, y);
        Obj_SetSpeed(obj, speed);
        Obj_SetAngle(obj, angle);
        ObjShot_SetGraphic(obj, graphic1);
        ObjShot_SetDelay(obj, delay);
        
                        break;
        loop(delay){ yield; }
        
        //オブジェクトIDの登録
        arrayObj = arrayObj ~ [obj];


        while(!Obj_BeDeleted(obj)) {
            ascent(let i in 0..length(arrayObj)){
               //自分以外との当たり判定を調べる
                if(obj_L!=arrayObj[i]){
                    //衝突していたら弾を発射して自身と衝突相手を削除する
                    if(Collision_Obj_Obj(obj_L, arrayObj[i])){
                    
                        //衝突地点(弾同士の中点)
                        let impactX = (Obj_GetX(obj_L) + Obj_GetX(arrayObj[i]))/2;
                        let impactY = (Obj_GetY(obj_L) + Obj_GetY(arrayObj[i]))/2;
                        
                        Obj_Delete(obj_L);
                        Obj_Delete(arrayObj[i]);
                        break;
                        loop(40){
                        CreateImpactingShot(impactX,
	                impactY, rand(1,2),
	                rand(0,360), YELLOW02, WHITE05, 20);loop(20){ yield; }
                       }
                        break;
                    }
                }
            }
            yield;
        }
     
                        
        //オブジェクトIDの削除

        ascent(let i in 0..length(arrayObj)){
            if(obj_L==arrayObj[i]){
                arrayObj = erase(arrayObj, i);
                break;
            }
        }

    }
}