#東方弾幕風[Single]	//プログラム中のコメントアウトについて
#ScriptVersion[3]	//★　ver2には無かった処理をする関数
#Title["首振りワインダー (GATP無し)"]	//≒　ver2に似たような関数がある
#Text[""]		//無印　ver2にほぼ同じ関数がある (ただし処理の適用範囲が拡張されているものが多いため、注釈付き)
#Image[""]		//未記入　verに同名、同じ処理の関数がある
#System["/script/default_system/Default_System.txt"]
#Background["script/default_system/Default_Background_IceMountain.txt"]
#BGM[DEFAULT]
#Player[DEFAULT]

#include "script/default_system/Default_ShotConst.txt"

let objEnemy;

@Event {
  alternative(GetEventType)	//★イベントの種類を取得する関数
  case(EV_REQUEST_LIFE) {	//★引数の文字列はライフ設定要求
    SetScriptResult(2000);	//≒ SetLife (EV_REQUEST_LIFEと併用)
  }
}

@Initialize {
  objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);	//Obj_Create のボス版
  ObjEnemy_Regist(objEnemy);			//★オブジェクトのアクティブ化

//☆ 注意 ☆  スクリプトパスのディレクトリの区切りは『\』ではなく『/』で行う
  let imgExRumia = GetCurrentScriptDirectory ~ "img/ExRumia.png";
  ObjPrim_SetTexture(objEnemy, imgExRumia);		//ObjEffect_SetTexture ボスもオブジェクトなので、ボスIDに関連付け
  ObjSprite2D_SetSourceRect(objEnemy, 64, 1, 127, 64);	//SetGraphicRect のオブジェクト版
  ObjSprite2D_SetDestCenter(objEnemy);			//★指定したオブジェクトの原点をSetSourceRectで抜き出した画像の中心にセットする

  let cx = GetStgFrameWidth / 2;			//≒ GetCenterX に相当する計算
  ObjMove_SetDestAtFrame(objEnemy, cx, 60, 58);		//SetMovePosition02 相当だが、オブジェクトにも有効

  mainTask;
  endProcess;
}

@MainLoop {
  ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);	//SetCollisionA GetX GetY
  ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);	//SetCollisionB GetX GetY
  yield;
}

task mainTask {
  loop(60) {yield;}

  loop {
    let angle1 = GetAngleToPlayer(objEnemy);	//GetAngleToPlayer
    let angle2 = 180;
    let count = 0;
    while(count < 480) {
	//CreateShot01(GetX, GetY, 8, angle1+angle2, RED01, 0);　下は省略
      CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 8, angle1+angle2, DS_BALL_S_RED, 0);
      CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 8, angle1-angle2, DS_BALL_S_RED, 0);
      if(count < 120) {
	angle2 -= 165/120;
      } else if((count >= 180) && (count < 240)) {
	angle1 += 25/60;
      } else if((count >= 240) && (count < 360)) {
	angle1 -= 50/120;
      } else if((count >= 360) && (count < 420)) {
	angle1 += 25/60;
      }
      count++;
      yield;
    }
    loop(120) {yield;}
  }
}

task endProcess {
  while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {yield;}	//≒ GetLife 相当
  Obj_Delete(objEnemy);
  CloseScript(GetOwnScriptID);		//★スクリプトの終了を行う　★自分のスクリプトIDを取得
  return;
}

#include "./function.txt"
