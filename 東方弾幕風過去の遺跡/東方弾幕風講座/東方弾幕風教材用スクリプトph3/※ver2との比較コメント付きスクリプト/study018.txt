#東方弾幕風[Single]	//プログラム中のコメントアウトについて
#ScriptVersion[3]	//★　ver2には無かった処理をする関数
#Title["カーブ弾 (GATP, rand_int無し)"]	//≒　ver2に似たような関数がある
#Text[""]		//無印　ver2にほぼ同じ関数がある (ただし処理の適用範囲が拡張されているものが多いため、注釈付き)
#Image[""]		//未記入　verに同名、同じ処理の関数がある
#System["/script/default_system/Default_System.txt"]
#Background["script/default_system/Default_Background_IceMountain.txt"]
#BGM[DEFAULT]
#Player[DEFAULT]

#include "script/default_system/Default_ShotConst.txt"

let objEnemy;

@Event {
  alternative(GetEventType)	//★イベントの種類を取得する関数
  case(EV_REQUEST_LIFE) {	//★引数の文字列はライフ設定要求
    SetScriptResult(2000);	//≒ SetLife (EV_REQUEST_LIFEと併用)
  }
}

@Initialize {
  objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);	//Obj_Create のボス版
  ObjEnemy_Regist(objEnemy);			//★オブジェクトのアクティブ化

//☆ 注意 ☆  スクリプトパスのディレクトリの区切りは『\』ではなく『/』で行う
  let imgExRumia = GetCurrentScriptDirectory ~ "img/ExRumia.png";
  ObjPrim_SetTexture(objEnemy, imgExRumia);		//ObjEffect_SetTexture ボスもオブジェクトなので、ボスIDに関連付け
  ObjSprite2D_SetSourceRect(objEnemy, 64, 1, 127, 64);	//SetGraphicRect のオブジェクト版
  ObjSprite2D_SetDestCenter(objEnemy);			//★指定したオブジェクトの原点をSetSourceRectで抜き出した画像の中心にセットする

  let cx = GetStgFrameWidth / 2;			//≒ GetCenterX に相当する計算
  ObjMove_SetDestAtFrame(objEnemy, cx, 60, 58);		//SetMovePosition02 相当だが、オブジェクトにも有効

  mainTask;
  endProcess;
}

@MainLoop {
  ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);	//SetCollisionA GetX GetY
  ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);	//SetCollisionB GetX GetY
  yield;
}

task mainTask {
  loop(60) {yield;}

	//≒ CreateShot01, SetShotDataAの複合に近い
	//ph3ではCreateShot系がオブジェクトIDを返り値として渡してくる
	//それを格納し、ObjMove系の関数を弾オブジェクトに対して実行する
	//ちなみにSetShotDataAとObjMove_AddPatternA2では、引数の角速度と加速度の順序が逆なので注意
  let bullet = CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 2, GetAngleToPlayer(objEnemy), DS_BALL_S_RED, 0);
  ObjMove_AddPatternA2(bullet, 0, NO_CHANGE, NO_CHANGE, 0.05, 0.8, 8);

  loop(180) {yield;}
  let sign = rand_int0(1)*2 - 1;	//rand_int(0, 1) 相当　rand_intがまだない
  loop {
    let angle = rand(0, 360);
    loop(5) {
      loop(16) {
	//省略　上を参照のこと
	bullet = CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 2, angle, DS_BALL_S_RED, 0);
	ObjMove_AddPatternA2(bullet, 0, NO_CHANGE, NO_CHANGE, 0.05, 0.8*sign, 8);
	angle += 360/16;
      }
      loop(4) {yield;}
    }
    sign *= -1;
    loop(40) {yield;}
  }
}

task endProcess {
  while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {yield;}	//≒ GetLife 相当
  Obj_Delete(objEnemy);
  CloseScript(GetOwnScriptID);		//★スクリプトの終了を行う　★自分のスクリプトIDを取得
  return;
}

#include "./function.txt"
