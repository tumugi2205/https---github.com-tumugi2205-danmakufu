#東方弾幕風[Single]	//プログラム中のコメントアウトについて
#ScriptVersion[3]	//★　ver2には無かった処理をする関数
#Title["オブジェクト弾 (当たり判定の消失) (rand_int無し)"]	//≒　ver2に似たような関数がある
#Text[""]		//無印　ver2にほぼ同じ関数がある (ただし処理の適用範囲が拡張されているものが多いため、注釈付き)
#Image[""]		//未記入　verに同名、同じ処理の関数がある
#System["/script/default_system/Default_System.txt"]
#Background["script/default_system/Default_Background_IceMountain.txt"]
#BGM[DEFAULT]
#Player[DEFAULT]

#include "script/default_system/Default_ShotConst.txt"

let objEnemy;

@Event {
  alternative(GetEventType)	//★イベントの種類を取得する関数
  case(EV_REQUEST_LIFE) {	//★引数の文字列はライフ設定要求
    SetScriptResult(2000);	//≒ SetLife (EV_REQUEST_LIFEと併用)
  }
}

@Initialize {
  objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);	//Obj_Create のボス版
  ObjEnemy_Regist(objEnemy);			//★オブジェクトのアクティブ化

//☆ 注意 ☆  スクリプトパスのディレクトリの区切りは『\』ではなく『/』で行う
  let imgExRumia = GetCurrentScriptDirectory ~ "img/ExRumia.png";
  ObjPrim_SetTexture(objEnemy, imgExRumia);		//ObjEffect_SetTexture ボスもオブジェクトなので、ボスIDに関連付け
  ObjSprite2D_SetSourceRect(objEnemy, 64, 1, 127, 64);	//SetGraphicRect のオブジェクト版
  ObjSprite2D_SetDestCenter(objEnemy);			//★指定したオブジェクトの原点をSetSourceRectで抜き出した画像の中心にセットする

  let cx = GetStgFrameWidth / 2;			//≒ GetCenterX に相当する計算
  ObjMove_SetDestAtFrame(objEnemy, cx, 60, 58);		//SetMovePosition02 相当だが、オブジェクトにも有効

  mainTask;
  endProcess;
}

@MainLoop {
  ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);	//SetCollisionA GetX GetY
  ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);	//SetCollisionB GetX GetY
  yield;
}

task mainTask {
  loop(60) {yield;}

	//SetMovePosition02(GetCenterX, GetCenterY-40, 60)
  ObjMove_SetDestAtFrame(objEnemy, GetStgFrameWidth/2, GetStgFrameHeight/2 - 40, 60);
  loop(60) {yield;}
  loop {
    loop(4) {
      let angle = rand(0, 360);
      let cycle = rand_int0(119);	//rand_int(0, 119) 相当
      loop(120) {
	objectBullet(angle, cycle);
	angle += 360/120;
      }
      loop(120) {yield;}
    }
    loop(180) {yield;}

    let count = 0;
    let sign = rand_int0(1)*2 - 1;	//rand_int(0, 1) 相当
    loop(16) {
      let type = 1 + truncate(count/4);
      let angle = rand(0, 360);
      let cycle = rand_int0(119);	//rand_int(0, 119) 相当

      loop(120) {
	objectBullet(angle, cycle);
	angle += 360/120;
	cycle = (cycle + type*sign + 120) % 120;
      }

      sign *= -1;
      count++;
      loop(120) {yield;}
    }
    loop(180) {yield;}
  }
}

task objectBullet (let angle, let cycle) {
	//面倒なのでph3ならではの記述で
  let obj = CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 1, angle, DS_BALL_M_RED, 0);

  while(!Obj_IsDeleted(obj)) {		//Obj_BeDeleted(obj)
    let alpha = 15 + 240*cycle/60;
    if(cycle >= 60) {
      alpha = 255 - 240*(cycle-60)/60;
    }

    ObjRender_SetAlpha(obj, alpha);	//Obj_SetAlpha
    if(alpha >= 192) {
      ObjShot_SetIntersectionEnable(obj, true);		//Obj_SetCollisionToPlayer
      ObjShot_SetGraphic(obj, DS_BALL_M_RED);
    } else {
      ObjShot_SetIntersectionEnable(obj, false);	//Obj_SetCollisionToPlayer
      ObjShot_SetGraphic(obj, DS_BALL_M_WHITE);		//ph3の中弾オレンジが見にくいため、ph3では白に変更
    }

    cycle = (cycle+1) % 120;
    yield;
  }
}

task endProcess {
  while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {yield;}	//≒ GetLife 相当
  Obj_Delete(objEnemy);
  CloseScript(GetOwnScriptID);		//★スクリプトの終了を行う　★自分のスクリプトIDを取得
  return;
}

#include "./function.txt"
