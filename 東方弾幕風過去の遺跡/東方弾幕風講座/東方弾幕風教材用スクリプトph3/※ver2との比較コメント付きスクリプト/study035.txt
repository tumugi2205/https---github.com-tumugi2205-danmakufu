#東方弾幕風[Single]	//プログラム中のコメントアウトについて
#ScriptVersion[3]	//★　ver2には無かった処理をする関数
#Title["保留"]	//≒　ver2に似たような関数がある
#Text["SetShotAutoDeleteClipに相当するものがまだない？ので、一時保留。現在の中身はstudy034.txtと同じ。"]		//無印　ver2にほぼ同じ関数がある (ただし処理の適用範囲が拡張されているものが多いため、注釈付き)
#Image[""]		//未記入　verに同名、同じ処理の関数がある
#System["/script/default_system/Default_System.txt"]
#Background["script/default_system/Default_Background_IceMountain.txt"]
#BGM[DEFAULT]
#Player[DEFAULT]

#include "script/default_system/Default_ShotConst.txt"

let objEnemy;

@Event {
  alternative(GetEventType)	//★イベントの種類を取得する関数
  case(EV_REQUEST_LIFE) {	//★引数の文字列はライフ設定要求
    SetScriptResult(2000);	//≒ SetLife (EV_REQUEST_LIFEと併用)
  }
}

@Initialize {
  objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);	//Obj_Create のボス版
  ObjEnemy_Regist(objEnemy);			//★オブジェクトのアクティブ化

//☆ 注意 ☆  スクリプトパスのディレクトリの区切りは『\』ではなく『/』で行う
  let imgExRumia = GetCurrentScriptDirectory ~ "img/ExRumia.png";
  ObjPrim_SetTexture(objEnemy, imgExRumia);		//ObjEffect_SetTexture ボスもオブジェクトなので、ボスIDに関連付け
  ObjSprite2D_SetSourceRect(objEnemy, 64, 1, 127, 64);	//SetGraphicRect のオブジェクト版
  ObjSprite2D_SetDestCenter(objEnemy);			//★指定したオブジェクトの原点をSetSourceRectで抜き出した画像の中心にセットする

  let cx = GetStgFrameWidth / 2;			//≒ GetCenterX に相当する計算
  ObjMove_SetDestAtFrame(objEnemy, cx, 100, 58);	//SetMovePosition02 相当だが、オブジェクトにも有効

  mainTask;
  endProcess;
}

@MainLoop {
  ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32);	//SetCollisionA GetX GetY
  ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 24);	//SetCollisionB GetX GetY
  yield;
}

task mainTask {
  loop(60) {yield;}

  let angle = rand(0, 360);
  loop(6) {
    objectBullet(angle);
    angle += 360/6;
  }
}

task objectBullet (let angle) {
	//面倒なのでph3ならではの記述で
  let obj = CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, angle, DS_BALL_M_RED, 0);
  ObjShot_SetSpellResist(obj, true);	//ObjShot_SetBombResist

  let count = 0;
  let radiusX = 0;
  let radiusY = 0;
  let angleSpeed = 2.2;
	//ph3では敵が消えてもオブジェクト弾が残り続けてしまうため、
	//敵が消えたらループを抜けるようにする
  while((!Obj_IsDeleted(obj)) && (!Obj_IsDeleted(objEnemy))) {	//Obj_BeDeleted(obj)
	//Obj_SetX(obj, GetX+radiusX*cos(angle));
    ObjMove_SetX(obj, ObjMove_GetX(objEnemy)+radiusX*cos(angle));
	//Obj_SetY(obj, GetY+radiusY*sin(angle));
    ObjMove_SetY(obj, ObjMove_GetY(objEnemy)+radiusY*sin(angle));
    if((count >= 120) && (count%6 == 0)) {
	//CreateShot01(Obj_GetX(obj), Obj_GetY(obj), 1.5, angle+count/2, RED01, 0);
      CreateShotA1(ObjMove_GetX(obj), ObjMove_GetY(obj), 1.5, angle+count/2, DS_BALL_S_RED, 0);
    }

    if(count < 60) {
      radiusX += 100/60;
      radiusY += 60/60;
    } else if((count%600 >= 240) && (count%600 < 300)) {
      radiusX -= 40/60;
      radiusY += 60/60;
    } else if(count%600 >= 540) {
      radiusX += 40/60;
      radiusY -= 60/60;
    }

    if((count%720 >= 240) && (count%720 < 360)) {
      angleSpeed -= 4.4/120;
    } else if(count%720 >= 600) {
      angleSpeed += 4.4/120;
    }

    angle += angleSpeed;
    count++;
    yield;
  }
  Obj_Delete(obj);	//敵が消えたらここでオブジェクト弾を消す
}

task endProcess {
  while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {yield;}	//≒ GetLife 相当
  Obj_Delete(objEnemy);
	//敵オブジェクト消滅からスクリプトが閉じるまでの１フレームの間にオブジェクト弾を消す
  yield;
  CloseScript(GetOwnScriptID);		//★スクリプトの終了を行う　★自分のスクリプトIDを取得
  return;
}

#include "./function.txt"
